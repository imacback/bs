<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/util 
		http://www.springframework.org/schema/util/spring-util-3.2.xsd">

    <bean id="messagePack" class="org.msgpack.MessagePack"/>

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig" lazy-init="false"
          p:maxTotal="${redis.maxTotal}"
          p:maxIdle="${redis.maxIdle}"
          p:minIdle="${redis.minIdle}"
          p:maxWaitMillis="${redis.maxWaitMillis}"
          p:testOnBorrow="${redis.testOnBorrow}"
          p:testOnReturn="${redis.testOnReturn}"
          p:testWhileIdle="${redis.testWhileIdle}"
          p:blockWhenExhausted="${redis.blockWhenExhausted}"
          p:timeBetweenEvictionRunsMillis="${redis.timeBetweenEvictionRunsMillis}"
          p:numTestsPerEvictionRun="${redis.numTestsPerEvictionRun}"
          p:softMinEvictableIdleTimeMillis="${redis.softMinEvictableIdleTimeMillis}"
          p:minEvictableIdleTimeMillis="${redis.minEvictableIdleTimeMillis}" />

    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" lazy-init="false"
          p:hostName="${redis.host.front}"
          p:port="${redis.port.front}"
          p:database="${redis.database.front}"
          p:timeout="${redis.timeout}"
          p:usePool="${redis.use.pool}"
          p:poolConfig-ref="jedisPoolConfig" />

    <bean id="redisTemplate"
          class="org.springframework.data.redis.core.RedisTemplate"
          p:connectionFactory-ref="jedisConnectionFactory">
        <property name="KeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
    </bean>

    <bean id="stringRedisTemplate"
          class="org.springframework.data.redis.core.StringRedisTemplate"
          p:connectionFactory-ref="jedisConnectionFactory">
        <property name="KeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="ValueSerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
    </bean>

    <bean id="redisClient" class="com.duoqu.commons.redis.client.impl.SimpleRedisClientImpl"
          p:jedisConnectionFactory-ref="jedisConnectionFactory"
          p:stringRedisTemplate-ref="stringRedisTemplate"
          p:redisTemplate-ref="redisTemplate"
          p:messagePack-ref="messagePack"
            />
    <bean id="messageListener" class="com.duoqu.commons.redis.client.MessageListenerAdapter">
        <constructor-arg>
            <bean class="cn.aiyuedu.bs.front.redis.RedisMessageDelegate" />
        </constructor-arg>
    </bean>

    <bean id="redisContainer"
          class="org.springframework.data.redis.listener.RedisMessageListenerContainer">
        <property name="connectionFactory" ref="jedisConnectionFactory" />
        <property name="messageListeners">
            <map>
                <entry key-ref="messageListener">
                    <bean class="org.springframework.data.redis.listener.PatternTopic">
                        <constructor-arg value="rs-back-*" />
                    </bean>
                </entry>
            </map>
        </property>
    </bean>
</beans>
